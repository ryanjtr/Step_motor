
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800102  00800102  00000f5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001399  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f36  00000000  00000000  00003029  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b0  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb1  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000059ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_18>
  4c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
/*! \brief Init of peripheral devices.
 *
 *  Setup IO, uart, stepper, timer and interrupt.
 */
void Init(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  // Init of IO pins
  sm_driver_Init_IO();
  ae:	0e 94 89 00 	call	0x112	; 0x112 <sm_driver_Init_IO>

  // Init of Timer/Counter1
  speed_cntr_Init_Timer1();	
  b2:	0e 94 2f 02 	call	0x45e	; 0x45e <speed_cntr_Init_Timer1>
	// Init Uart
	usart0_init();
  b6:	0e 94 f7 05 	call	0xbee	; 0xbee <usart0_init>
   sei();
  ba:	78 94       	sei
}
  bc:	00 00       	nop
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:
void main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	28 97       	sbiw	r28, 0x08	; 8
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  // Number of steps to move.
  int steps = 200;
  d8:	88 ec       	ldi	r24, 0xC8	; 200
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01
  // Accelration to use.
  int acceleration = 50;
  e0:	82 e3       	ldi	r24, 0x32	; 50
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9c 83       	std	Y+4, r25	; 0x04
  e6:	8b 83       	std	Y+3, r24	; 0x03
  // Deceleration to use.
  int deceleration = 50;
  e8:	82 e3       	ldi	r24, 0x32	; 50
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9e 83       	std	Y+6, r25	; 0x06
  ee:	8d 83       	std	Y+5, r24	; 0x05
  // Speed to use.
  int speed = 100;
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	98 87       	std	Y+8, r25	; 0x08
  f6:	8f 83       	std	Y+7, r24	; 0x07
// 	printf("min delay= %d\n",min_delay);
// 	unsigned int step_delay = (T1_FREQ_148_ * sqrt_t_(A_SQ_ / accel_)) / 100;
// 	printf("step delay= %d\n",step_delay);
// 
// 
	Init();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
// 	usart0_send_string("\n");

	while(1)
	{
	
speed_cntr_Move(steps, acceleration, deceleration, speed);
  fc:	2f 81       	ldd	r18, Y+7	; 0x07
  fe:	38 85       	ldd	r19, Y+8	; 0x08
 100:	4d 81       	ldd	r20, Y+5	; 0x05
 102:	5e 81       	ldd	r21, Y+6	; 0x06
 104:	6b 81       	ldd	r22, Y+3	; 0x03
 106:	7c 81       	ldd	r23, Y+4	; 0x04
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	0e 94 9a 00 	call	0x134	; 0x134 <speed_cntr_Move>
// 	sprintf(str2,"%d",srd.run_state);
// 	usart0_send_string(str2);
// 	usart0_send_string("\n");
// 	
// 
 	}
 110:	f5 cf       	rjmp	.-22     	; 0xfc <main+0x38>

00000112 <sm_driver_Init_IO>:
int stepPosition = 0;

/*! \brief Init of io-pins for stepper motor.
 */
void sm_driver_Init_IO(void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
  // Init of IO pins
  
  DDRC |= ((1<<DDC2) |(1<<DDC3)) ; // Set output pin direction registers to output
 11a:	87 e2       	ldi	r24, 0x27	; 39
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	27 e2       	ldi	r18, 0x27	; 39
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	2c 60       	ori	r18, 0x0C	; 12
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
/*  SM_PORT &= ~((1<<PINC2) | (1<<PINC3)); // Set output pin registers to zero*/
}
 12c:	00 00       	nop
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <speed_cntr_Move>:
 *  \param accel  Accelration to use, in 0.01*rad/sec^2.
 *  \param decel  Decelration to use, in 0.01*rad/sec^2.
 *  \param speed  Max speed, in 0.01*rad/sec.
 */
void speed_cntr_Move(signed int step, unsigned int accel, unsigned int decel, unsigned int speed)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	2c 97       	sbiw	r28, 0x0c	; 12
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	9e 83       	std	Y+6, r25	; 0x06
 152:	8d 83       	std	Y+5, r24	; 0x05
 154:	78 87       	std	Y+8, r23	; 0x08
 156:	6f 83       	std	Y+7, r22	; 0x07
 158:	5a 87       	std	Y+10, r21	; 0x0a
 15a:	49 87       	std	Y+9, r20	; 0x09
 15c:	3c 87       	std	Y+12, r19	; 0x0c
 15e:	2b 87       	std	Y+11, r18	; 0x0b
  unsigned int max_s_lim;
  //! Number of steps before we must start deceleration (if accel does not hit max speed).
  unsigned int accel_lim;

  // Set direction from sign on step value.
  if (step < 0)
 160:	8d 81       	ldd	r24, Y+5	; 0x05
 162:	9e 81       	ldd	r25, Y+6	; 0x06
 164:	99 23       	and	r25, r25
 166:	6c f4       	brge	.+26     	; 0x182 <speed_cntr_Move+0x4e>
  {
    srd.dir = CCW;
 168:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    step = -step;
 172:	8d 81       	ldd	r24, Y+5	; 0x05
 174:	9e 81       	ldd	r25, Y+6	; 0x06
 176:	91 95       	neg	r25
 178:	81 95       	neg	r24
 17a:	91 09       	sbc	r25, r1
 17c:	9e 83       	std	Y+6, r25	; 0x06
 17e:	8d 83       	std	Y+5, r24	; 0x05
 180:	05 c0       	rjmp	.+10     	; 0x18c <speed_cntr_Move+0x58>
  }
  else
  {
    srd.dir = CW;
 182:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 186:	87 7f       	andi	r24, 0xF7	; 247
 188:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
  }

  // If moving only 1 step.
  if (step == 1)
 18c:	8d 81       	ldd	r24, Y+5	; 0x05
 18e:	9e 81       	ldd	r25, Y+6	; 0x06
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	41 f5       	brne	.+80     	; 0x1e4 <speed_cntr_Move+0xb0>
  {
    // Move one step...
    srd.accel_count = -1;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <srd+0xa>
 19c:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <srd+0x9>
    // ...in DECEL state.
    srd.run_state = DECEL;
 1a0:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 1a4:	88 7f       	andi	r24, 0xF8	; 248
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    // Just a short delay so main() can act on 'running'.
    srd.step_delay = 1000;
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <srd+0x2>
 1b4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <srd+0x1>
    status.running = TRUE;
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    OCR1A = 10;
 1c2:	88 e8       	ldi	r24, 0x88	; 136
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2a e0       	ldi	r18, 0x0A	; 10
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	31 83       	std	Z+1, r19	; 0x01
 1ce:	20 83       	st	Z, r18

    // Run Timer/Counter 1 with prescaler = 8.
    TCCR1B |=  (1 << CS11);
 1d0:	81 e8       	ldi	r24, 0x81	; 129
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	21 e8       	ldi	r18, 0x81	; 129
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	22 60       	ori	r18, 0x02	; 2
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
    // Set Timer/Counter to divide clock by 8
    TCCR1B |=  (1 << CS11);

  }

}
 1e2:	2f c1       	rjmp	.+606    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
    // Run Timer/Counter 1 with prescaler = 8.
    TCCR1B |=  (1 << CS11);

  }
  // Only move if number of steps to move is not zero.
  else if (step != 0)
 1e4:	8d 81       	ldd	r24, Y+5	; 0x05
 1e6:	9e 81       	ldd	r25, Y+6	; 0x06
 1e8:	89 2b       	or	r24, r25
 1ea:	09 f4       	brne	.+2      	; 0x1ee <speed_cntr_Move+0xba>
 1ec:	2a c1       	rjmp	.+596    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
  {
    // Refer to documentation for detailed information about these calculations.

    // Set max speed limit, by calc min_delay to use in timer.
    // min_delay = (alpha / tt)/ w
    srd.min_delay = A_T_x100 / speed;
 1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f2:	9c 01       	movw	r18, r24
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	86 ed       	ldi	r24, 0xD6	; 214
 1fa:	9f ee       	ldi	r25, 0xEF	; 239
 1fc:	af e2       	ldi	r26, 0x2F	; 47
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 208:	da 01       	movw	r26, r20
 20a:	c9 01       	movw	r24, r18
 20c:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <srd+0x8>
 210:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <srd+0x7>

    // Set accelration by calc the first (c0) step delay .
    // step_delay = 1/tt * sqrt(2*alpha/accel)
    // step_delay = ( tfreq*0.676/100 )*100 * sqrt( (2*alpha*10000000000) / (accel*100) )/10000
    srd.step_delay = (T1_FREQ_148 * sqrt_t(A_SQ / accel)) / 100;
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	98 85       	ldd	r25, Y+8	; 0x08
 218:	9c 01       	movw	r18, r24
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	9f e5       	ldi	r25, 0x5F	; 95
 222:	a3 e7       	ldi	r26, 0x73	; 115
 224:	b5 e2       	ldi	r27, 0x25	; 37
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 22e:	da 01       	movw	r26, r20
 230:	c9 01       	movw	r24, r18
 232:	bc 01       	movw	r22, r24
 234:	cd 01       	movw	r24, r26
 236:	0e 94 56 04 	call	0x8ac	; 0x8ac <sqrt_t>
 23a:	9b 01       	movw	r18, r22
 23c:	ac 01       	movw	r20, r24
 23e:	88 e6       	ldi	r24, 0x68	; 104
 240:	9a e1       	ldi	r25, 0x1A	; 26
 242:	dc 01       	movw	r26, r24
 244:	0e 94 47 07 	call	0xe8e	; 0xe8e <__muluhisi3>
 248:	dc 01       	movw	r26, r24
 24a:	cb 01       	movw	r24, r22
 24c:	24 e6       	ldi	r18, 0x64	; 100
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 25c:	da 01       	movw	r26, r20
 25e:	c9 01       	movw	r24, r18
 260:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <srd+0x2>
 264:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <srd+0x1>
	/*usart0_send_string("step delay = %f\n",srd.step_delay);*/
    // Find out after how many steps does the speed hit the max speed limit.
    // max_s_lim = speed^2 / (2*alpha*accel)
    max_s_lim = (long)speed * speed / (long)(((long)A_x20000 * accel) / 100);
 268:	8b 85       	ldd	r24, Y+11	; 0x0b
 26a:	9c 85       	ldd	r25, Y+12	; 0x0c
 26c:	9c 01       	movw	r18, r24
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	8b 85       	ldd	r24, Y+11	; 0x0b
 274:	9c 85       	ldd	r25, Y+12	; 0x0c
 276:	cc 01       	movw	r24, r24
 278:	a0 e0       	ldi	r26, 0x00	; 0
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	0e 94 f6 06 	call	0xdec	; 0xdec <__mulsi3>
 284:	7b 01       	movw	r14, r22
 286:	8c 01       	movw	r16, r24
 288:	8f 81       	ldd	r24, Y+7	; 0x07
 28a:	98 85       	ldd	r25, Y+8	; 0x08
 28c:	9c 01       	movw	r18, r24
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	84 e7       	ldi	r24, 0x74	; 116
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	dc 01       	movw	r26, r24
 298:	0e 94 47 07 	call	0xe8e	; 0xe8e <__muluhisi3>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	24 e6       	ldi	r18, 0x64	; 100
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 2b0:	da 01       	movw	r26, r20
 2b2:	c9 01       	movw	r24, r18
 2b4:	9c 01       	movw	r18, r24
 2b6:	ad 01       	movw	r20, r26
 2b8:	c8 01       	movw	r24, r16
 2ba:	b7 01       	movw	r22, r14
 2bc:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 2c0:	da 01       	movw	r26, r20
 2c2:	c9 01       	movw	r24, r18
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
	/*usart0_send_string("max_s_lim = %f\n",max_s_lim);*/
    // If we hit max speed limit before 0,5 step it will round to 0.
    // But in practice we need to move atleast 1 step to get any speed at all.
    if (max_s_lim == 0)
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	89 2b       	or	r24, r25
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <speed_cntr_Move+0x1a4>
    {
      max_s_lim = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
    }

    // Find out after how many steps we must start deceleration.
    // n1 = (n1+n2)decel / (accel + decel)
    accel_lim = ((long)step * decel) / (accel + decel);
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
 2da:	9e 81       	ldd	r25, Y+6	; 0x06
 2dc:	9c 01       	movw	r18, r24
 2de:	99 0f       	add	r25, r25
 2e0:	44 0b       	sbc	r20, r20
 2e2:	55 0b       	sbc	r21, r21
 2e4:	89 85       	ldd	r24, Y+9	; 0x09
 2e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e8:	cc 01       	movw	r24, r24
 2ea:	a0 e0       	ldi	r26, 0x00	; 0
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	0e 94 f6 06 	call	0xdec	; 0xdec <__mulsi3>
 2f6:	7b 01       	movw	r14, r22
 2f8:	8c 01       	movw	r16, r24
 2fa:	2f 81       	ldd	r18, Y+7	; 0x07
 2fc:	38 85       	ldd	r19, Y+8	; 0x08
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	9c 01       	movw	r18, r24
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	c8 01       	movw	r24, r16
 30e:	b7 01       	movw	r22, r14
 310:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 314:	da 01       	movw	r26, r20
 316:	c9 01       	movw	r24, r18
 318:	9c 83       	std	Y+4, r25	; 0x04
 31a:	8b 83       	std	Y+3, r24	; 0x03
    // We must accelrate at least 1 step before we can start deceleration.
    if (accel_lim == 0)
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	9c 81       	ldd	r25, Y+4	; 0x04
 320:	89 2b       	or	r24, r25
 322:	21 f4       	brne	.+8      	; 0x32c <speed_cntr_Move+0x1f8>
    {
      accel_lim = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9c 83       	std	Y+4, r25	; 0x04
 32a:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Use the limit we hit first to calc decel.
    if (accel_lim <= max_s_lim)
 32c:	2b 81       	ldd	r18, Y+3	; 0x03
 32e:	3c 81       	ldd	r19, Y+4	; 0x04
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	82 17       	cp	r24, r18
 336:	93 07       	cpc	r25, r19
 338:	68 f0       	brcs	.+26     	; 0x354 <speed_cntr_Move+0x220>
    {
      srd.decel_val = accel_lim - step;
 33a:	8d 81       	ldd	r24, Y+5	; 0x05
 33c:	9e 81       	ldd	r25, Y+6	; 0x06
 33e:	2b 81       	ldd	r18, Y+3	; 0x03
 340:	3c 81       	ldd	r19, Y+4	; 0x04
 342:	a9 01       	movw	r20, r18
 344:	48 1b       	sub	r20, r24
 346:	59 0b       	sbc	r21, r25
 348:	ca 01       	movw	r24, r20
 34a:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <srd+0x6>
 34e:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <srd+0x5>
 352:	26 c0       	rjmp	.+76     	; 0x3a0 <speed_cntr_Move+0x26c>
    }
    else
    {
      srd.decel_val = -((long)max_s_lim * accel) / decel;
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	9c 01       	movw	r18, r24
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	8f 81       	ldd	r24, Y+7	; 0x07
 360:	98 85       	ldd	r25, Y+8	; 0x08
 362:	cc 01       	movw	r24, r24
 364:	a0 e0       	ldi	r26, 0x00	; 0
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	0e 94 f6 06 	call	0xdec	; 0xdec <__mulsi3>
 370:	dc 01       	movw	r26, r24
 372:	cb 01       	movw	r24, r22
 374:	b0 95       	com	r27
 376:	a0 95       	com	r26
 378:	90 95       	com	r25
 37a:	81 95       	neg	r24
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	af 4f       	sbci	r26, 0xFF	; 255
 380:	bf 4f       	sbci	r27, 0xFF	; 255
 382:	29 85       	ldd	r18, Y+9	; 0x09
 384:	3a 85       	ldd	r19, Y+10	; 0x0a
 386:	99 01       	movw	r18, r18
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	bc 01       	movw	r22, r24
 38e:	cd 01       	movw	r24, r26
 390:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 394:	da 01       	movw	r26, r20
 396:	c9 01       	movw	r24, r18
 398:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <srd+0x6>
 39c:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <srd+0x5>
    }
    // We must decelrate at least 1 step to stop.
    if (srd.decel_val == 0)
 3a0:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <srd+0x5>
 3a4:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <srd+0x6>
 3a8:	89 2b       	or	r24, r25
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <speed_cntr_Move+0x284>
    {
      srd.decel_val = -1;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
 3b0:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <srd+0x6>
 3b4:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <srd+0x5>
    }

    // Find step to start decleration.
    srd.decel_start = step + srd.decel_val;
 3b8:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <srd+0x5>
 3bc:	30 91 0f 06 	lds	r19, 0x060F	; 0x80060f <srd+0x6>
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	82 0f       	add	r24, r18
 3c6:	93 1f       	adc	r25, r19
 3c8:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <srd+0x4>
 3cc:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <srd+0x3>

    // If the maximum speed is so low that we dont need to go via accelration state.
     if (srd.step_delay <= srd.min_delay)
 3d0:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <srd+0x1>
 3d4:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <srd+0x2>
 3d8:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <srd+0x7>
 3dc:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <srd+0x8>
 3e0:	28 17       	cp	r18, r24
 3e2:	39 07       	cpc	r19, r25
 3e4:	78 f0       	brcs	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     {
       srd.step_delay = srd.min_delay;
 3e6:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <srd+0x7>
 3ea:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <srd+0x8>
 3ee:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <srd+0x2>
 3f2:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <srd+0x1>
       srd.run_state = RUN;
 3f6:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 3fa:	88 7f       	andi	r24, 0xF8	; 248
 3fc:	83 60       	ori	r24, 0x03	; 3
 3fe:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
 402:	06 c0       	rjmp	.+12     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     }
     else
     {
       srd.run_state = ACCEL;
 404:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 408:	88 7f       	andi	r24, 0xF8	; 248
 40a:	81 60       	ori	r24, 0x01	; 1
 40c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    }

    // Reset counter.
    srd.accel_count = 0;
 410:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <srd+0xa>
 414:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <srd+0x9>
    status.running = TRUE;
 418:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    OCR1A = 10;
 422:	88 e8       	ldi	r24, 0x88	; 136
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2a e0       	ldi	r18, 0x0A	; 10
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	31 83       	std	Z+1, r19	; 0x01
 42e:	20 83       	st	Z, r18

    // Set Timer/Counter to divide clock by 8
    TCCR1B |=  (1 << CS11);
 430:	81 e8       	ldi	r24, 0x81	; 129
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	21 e8       	ldi	r18, 0x81	; 129
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	22 60       	ori	r18, 0x02	; 2
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18

  }

}
 442:	00 00       	nop
 444:	2c 96       	adiw	r28, 0x0c	; 12
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	08 95       	ret

0000045e <speed_cntr_Init_Timer1>:
 *
 *  Set up Timer/Counter1 to use mode 1 CTC and
 *  enable Output Compare A Match Interrupt.
 */
void speed_cntr_Init_Timer1(void)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
	// Tells what part of speed ramp we are in.
	srd.run_state = STOP;
 466:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
	// Timer/Counter 1 in mode 4 CTC (Not running).
	TCCR1B = (1 << WGM12);
 470:	81 e8       	ldi	r24, 0x81	; 129
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	28 e0       	ldi	r18, 0x08	; 8
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
	
	// Timer/Counter 1 Output Compare A Match Interrupt enable.
	 TIMSK1 = (1 << OCIE1A);
 47a:	8f e6       	ldi	r24, 0x6F	; 111
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	22 e0       	ldi	r18, 0x02	; 2
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
	
}
 484:	00 00       	nop
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <__vector_11>:
 *  A new step delay is calculated to follow wanted speed profile
 *  on basis of accel/decel parameters.
 */

ISR(TIMER1_COMPA_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <__vector_11+0x2e>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
  // Counting steps when moving.
  static unsigned int step_count = 0;
  // Keep track of remainder from new_step-delay calculation to incrase accurancy
  static unsigned int rest = 0;

  OCR1A = srd.step_delay;
 4be:	88 e8       	ldi	r24, 0x88	; 136
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <srd+0x1>
 4c6:	30 91 0b 06 	lds	r19, 0x060B	; 0x80060b <srd+0x2>
 4ca:	fc 01       	movw	r30, r24
 4cc:	31 83       	std	Z+1, r19	; 0x01
 4ce:	20 83       	st	Z, r18

  
  //Output step motor direction
  PORTC |= ((srd.dir)<<PINC3);
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	28 e2       	ldi	r18, 0x28	; 40
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	f9 01       	movw	r30, r18
 4da:	20 81       	ld	r18, Z
 4dc:	42 2f       	mov	r20, r18
 4de:	20 91 09 06 	lds	r18, 0x0609	; 0x800609 <srd>
 4e2:	23 fb       	bst	r18, 3
 4e4:	22 27       	eor	r18, r18
 4e6:	20 f9       	bld	r18, 0
 4e8:	22 2f       	mov	r18, r18
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	24 2b       	or	r18, r20
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18

  switch (srd.run_state)
 4fe:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 502:	87 70       	andi	r24, 0x07	; 7
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	91 05       	cpc	r25, r1
 50c:	29 f1       	breq	.+74     	; 0x558 <__vector_11+0xcc>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	91 05       	cpc	r25, r1
 512:	1c f4       	brge	.+6      	; 0x51a <__vector_11+0x8e>
 514:	89 2b       	or	r24, r25
 516:	49 f0       	breq	.+18     	; 0x52a <__vector_11+0x9e>
 518:	aa c1       	rjmp	.+852    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	91 05       	cpc	r25, r1
 51e:	09 f4       	brne	.+2      	; 0x522 <__vector_11+0x96>
 520:	13 c1       	rjmp	.+550    	; 0x748 <__vector_11+0x2bc>
 522:	03 97       	sbiw	r24, 0x03	; 3
 524:	09 f4       	brne	.+2      	; 0x528 <__vector_11+0x9c>
 526:	d6 c0       	rjmp	.+428    	; 0x6d4 <__vector_11+0x248>
 528:	a2 c1       	rjmp	.+836    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
  {
  case STOP:
    step_count = 0;
 52a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <step_count.2058+0x1>
 52e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <step_count.2058>
    rest = 0;
 532:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rest.2059+0x1>
 536:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rest.2059>
    // Stop Timer/Counter 1.
    /*TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));*/
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	21 e8       	ldi	r18, 0x81	; 129
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	f9 01       	movw	r30, r18
 544:	20 81       	ld	r18, Z
 546:	28 7f       	andi	r18, 0xF8	; 248
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
    status.running = FALSE;
 54c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    break;
 556:	8b c1       	rjmp	.+790    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>

  case ACCEL:
    /*sm_driver_StepCounter(srd.dir);*/
	PORTC ^=(1<<PINC2);
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	28 e2       	ldi	r18, 0x28	; 40
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	30 81       	ld	r19, Z
 564:	24 e0       	ldi	r18, 0x04	; 4
 566:	23 27       	eor	r18, r19
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
    step_count++;
 56c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <step_count.2058>
 570:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <step_count.2058+0x1>
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <step_count.2058+0x1>
 57a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <step_count.2058>
    srd.accel_count++;
 57e:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <srd+0x9>
 582:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <srd+0xa>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <srd+0xa>
 58c:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <srd+0x9>
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
 590:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <srd+0x1>
 594:	10 91 0b 06 	lds	r17, 0x060B	; 0x80060b <srd+0x2>
 598:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <srd+0x1>
 59c:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <srd+0x2>
 5a0:	cc 01       	movw	r24, r24
 5a2:	a0 e0       	ldi	r26, 0x00	; 0
 5a4:	b0 e0       	ldi	r27, 0x00	; 0
 5a6:	9c 01       	movw	r18, r24
 5a8:	ad 01       	movw	r20, r26
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	44 1f       	adc	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rest.2059>
 5b6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rest.2059+0x1>
 5ba:	cc 01       	movw	r24, r24
 5bc:	a0 e0       	ldi	r26, 0x00	; 0
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	82 0f       	add	r24, r18
 5c2:	93 1f       	adc	r25, r19
 5c4:	a4 1f       	adc	r26, r20
 5c6:	b5 1f       	adc	r27, r21
 5c8:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <srd+0x9>
 5cc:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <srd+0xa>
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	2f 5f       	subi	r18, 0xFF	; 255
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	03 2e       	mov	r0, r19
 5de:	00 0c       	add	r0, r0
 5e0:	44 0b       	sbc	r20, r20
 5e2:	55 0b       	sbc	r21, r21
 5e4:	bc 01       	movw	r22, r24
 5e6:	cd 01       	movw	r24, r26
 5e8:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 5ec:	da 01       	movw	r26, r20
 5ee:	c9 01       	movw	r24, r18
 5f0:	98 01       	movw	r18, r16
 5f2:	28 1b       	sub	r18, r24
 5f4:	39 0b       	sbc	r19, r25
 5f6:	c9 01       	movw	r24, r18
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
 5fc:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <srd+0x1>
 600:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <srd+0x2>
 604:	cc 01       	movw	r24, r24
 606:	a0 e0       	ldi	r26, 0x00	; 0
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	9c 01       	movw	r18, r24
 60c:	ad 01       	movw	r20, r26
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	44 1f       	adc	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rest.2059>
 61a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rest.2059+0x1>
 61e:	cc 01       	movw	r24, r24
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	82 0f       	add	r24, r18
 626:	93 1f       	adc	r25, r19
 628:	a4 1f       	adc	r26, r20
 62a:	b5 1f       	adc	r27, r21
 62c:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <srd+0x9>
 630:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <srd+0xa>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	22 0f       	add	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	03 2e       	mov	r0, r19
 642:	00 0c       	add	r0, r0
 644:	44 0b       	sbc	r20, r20
 646:	55 0b       	sbc	r21, r21
 648:	bc 01       	movw	r22, r24
 64a:	cd 01       	movw	r24, r26
 64c:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 650:	dc 01       	movw	r26, r24
 652:	cb 01       	movw	r24, r22
 654:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <rest.2059+0x1>
 658:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rest.2059>
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
 65c:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <srd+0x3>
 660:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <srd+0x4>
 664:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <step_count.2058>
 668:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <step_count.2058+0x1>
 66c:	82 17       	cp	r24, r18
 66e:	93 07       	cpc	r25, r19
 670:	78 f0       	brcs	.+30     	; 0x690 <__vector_11+0x204>
    {
      srd.accel_count = srd.decel_val;
 672:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <srd+0x5>
 676:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <srd+0x6>
 67a:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <srd+0xa>
 67e:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <srd+0x9>
      srd.run_state = DECEL;
 682:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 686:	88 7f       	andi	r24, 0xF8	; 248
 688:	82 60       	ori	r24, 0x02	; 2
 68a:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
      last_accel_delay = new_step_delay;
      new_step_delay = srd.min_delay;
      rest = 0;
      srd.run_state = RUN;
    }
    break;
 68e:	ea c0       	rjmp	.+468    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
    {
      srd.accel_count = srd.decel_val;
      srd.run_state = DECEL;
    }
    // Chech if we hitted max speed.
    else if (new_step_delay <= srd.min_delay)
 690:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <srd+0x7>
 694:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <srd+0x8>
 698:	9c 01       	movw	r18, r24
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	9a 81       	ldd	r25, Y+2	; 0x02
 69e:	28 17       	cp	r18, r24
 6a0:	39 07       	cpc	r19, r25
 6a2:	08 f4       	brcc	.+2      	; 0x6a6 <__vector_11+0x21a>
 6a4:	df c0       	rjmp	.+446    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
    {
      last_accel_delay = new_step_delay;
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	9a 81       	ldd	r25, Y+2	; 0x02
 6aa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <last_accel_delay.2057+0x1>
 6ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <last_accel_delay.2057>
      new_step_delay = srd.min_delay;
 6b2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <srd+0x7>
 6b6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <srd+0x8>
 6ba:	9a 83       	std	Y+2, r25	; 0x02
 6bc:	89 83       	std	Y+1, r24	; 0x01
      rest = 0;
 6be:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rest.2059+0x1>
 6c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rest.2059>
      srd.run_state = RUN;
 6c6:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 6ca:	88 7f       	andi	r24, 0xF8	; 248
 6cc:	83 60       	ori	r24, 0x03	; 3
 6ce:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    }
    break;
 6d2:	c8 c0       	rjmp	.+400    	; 0x864 <__DATA_REGION_LENGTH__+0x64>

  case RUN:
    //sm_driver_StepCounter(srd.dir);
	PORTC ^=(1<<PINC2);
 6d4:	88 e2       	ldi	r24, 0x28	; 40
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	28 e2       	ldi	r18, 0x28	; 40
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	30 81       	ld	r19, Z
 6e0:	24 e0       	ldi	r18, 0x04	; 4
 6e2:	23 27       	eor	r18, r19
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
    step_count++;
 6e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <step_count.2058>
 6ec:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <step_count.2058+0x1>
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <step_count.2058+0x1>
 6f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <step_count.2058>
    new_step_delay = srd.min_delay;
 6fa:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <srd+0x7>
 6fe:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <srd+0x8>
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
 706:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <srd+0x3>
 70a:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <srd+0x4>
 70e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <step_count.2058>
 712:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <step_count.2058+0x1>
 716:	82 17       	cp	r24, r18
 718:	93 07       	cpc	r25, r19
 71a:	08 f4       	brcc	.+2      	; 0x71e <__vector_11+0x292>
 71c:	a5 c0       	rjmp	.+330    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
    {
      srd.accel_count = srd.decel_val;
 71e:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <srd+0x5>
 722:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <srd+0x6>
 726:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <srd+0xa>
 72a:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <srd+0x9>
      // Start decelration with same delay as accel ended with.
      new_step_delay = last_accel_delay;
 72e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <last_accel_delay.2057>
 732:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <last_accel_delay.2057+0x1>
 736:	9a 83       	std	Y+2, r25	; 0x02
 738:	89 83       	std	Y+1, r24	; 0x01
      srd.run_state = DECEL;
 73a:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 73e:	88 7f       	andi	r24, 0xF8	; 248
 740:	82 60       	ori	r24, 0x02	; 2
 742:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    }
    break;
 746:	90 c0       	rjmp	.+288    	; 0x868 <__DATA_REGION_LENGTH__+0x68>

  case DECEL:
    /*sm_driver_StepCounter(srd.dir);*/
	PORTC ^=(1<<PINC2);
 748:	88 e2       	ldi	r24, 0x28	; 40
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	28 e2       	ldi	r18, 0x28	; 40
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	30 81       	ld	r19, Z
 754:	24 e0       	ldi	r18, 0x04	; 4
 756:	23 27       	eor	r18, r19
 758:	fc 01       	movw	r30, r24
 75a:	20 83       	st	Z, r18
    step_count++;
 75c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <step_count.2058>
 760:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <step_count.2058+0x1>
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <step_count.2058+0x1>
 76a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <step_count.2058>
    srd.accel_count++;
 76e:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <srd+0x9>
 772:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <srd+0xa>
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <srd+0xa>
 77c:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <srd+0x9>
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
 780:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <srd+0x1>
 784:	10 91 0b 06 	lds	r17, 0x060B	; 0x80060b <srd+0x2>
 788:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <srd+0x1>
 78c:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <srd+0x2>
 790:	cc 01       	movw	r24, r24
 792:	a0 e0       	ldi	r26, 0x00	; 0
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	9c 01       	movw	r18, r24
 798:	ad 01       	movw	r20, r26
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	44 1f       	adc	r20, r20
 7a0:	55 1f       	adc	r21, r21
 7a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rest.2059>
 7a6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rest.2059+0x1>
 7aa:	cc 01       	movw	r24, r24
 7ac:	a0 e0       	ldi	r26, 0x00	; 0
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
 7b0:	82 0f       	add	r24, r18
 7b2:	93 1f       	adc	r25, r19
 7b4:	a4 1f       	adc	r26, r20
 7b6:	b5 1f       	adc	r27, r21
 7b8:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <srd+0x9>
 7bc:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <srd+0xa>
 7c0:	22 0f       	add	r18, r18
 7c2:	33 1f       	adc	r19, r19
 7c4:	22 0f       	add	r18, r18
 7c6:	33 1f       	adc	r19, r19
 7c8:	2f 5f       	subi	r18, 0xFF	; 255
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	03 2e       	mov	r0, r19
 7ce:	00 0c       	add	r0, r0
 7d0:	44 0b       	sbc	r20, r20
 7d2:	55 0b       	sbc	r21, r21
 7d4:	bc 01       	movw	r22, r24
 7d6:	cd 01       	movw	r24, r26
 7d8:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 7dc:	da 01       	movw	r26, r20
 7de:	c9 01       	movw	r24, r18
 7e0:	98 01       	movw	r18, r16
 7e2:	28 1b       	sub	r18, r24
 7e4:	39 0b       	sbc	r19, r25
 7e6:	c9 01       	movw	r24, r18
 7e8:	9a 83       	std	Y+2, r25	; 0x02
 7ea:	89 83       	std	Y+1, r24	; 0x01
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
 7ec:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <srd+0x1>
 7f0:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <srd+0x2>
 7f4:	cc 01       	movw	r24, r24
 7f6:	a0 e0       	ldi	r26, 0x00	; 0
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	9c 01       	movw	r18, r24
 7fc:	ad 01       	movw	r20, r26
 7fe:	22 0f       	add	r18, r18
 800:	33 1f       	adc	r19, r19
 802:	44 1f       	adc	r20, r20
 804:	55 1f       	adc	r21, r21
 806:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rest.2059>
 80a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rest.2059+0x1>
 80e:	cc 01       	movw	r24, r24
 810:	a0 e0       	ldi	r26, 0x00	; 0
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	82 0f       	add	r24, r18
 816:	93 1f       	adc	r25, r19
 818:	a4 1f       	adc	r26, r20
 81a:	b5 1f       	adc	r27, r21
 81c:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <srd+0x9>
 820:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <srd+0xa>
 824:	22 0f       	add	r18, r18
 826:	33 1f       	adc	r19, r19
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	2f 5f       	subi	r18, 0xFF	; 255
 82e:	3f 4f       	sbci	r19, 0xFF	; 255
 830:	03 2e       	mov	r0, r19
 832:	00 0c       	add	r0, r0
 834:	44 0b       	sbc	r20, r20
 836:	55 0b       	sbc	r21, r21
 838:	bc 01       	movw	r22, r24
 83a:	cd 01       	movw	r24, r26
 83c:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodsi4>
 840:	dc 01       	movw	r26, r24
 842:	cb 01       	movw	r24, r22
 844:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <rest.2059+0x1>
 848:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rest.2059>
    // Check if we at last step
    if (srd.accel_count >= 0)
 84c:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <srd+0x9>
 850:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <srd+0xa>
 854:	99 23       	and	r25, r25
 856:	54 f0       	brlt	.+20     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
    {
      srd.run_state = STOP;
 858:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <srd>
 85c:	88 7f       	andi	r24, 0xF8	; 248
 85e:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <srd>
    }
    break;
 862:	04 c0       	rjmp	.+8      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
      last_accel_delay = new_step_delay;
      new_step_delay = srd.min_delay;
      rest = 0;
      srd.run_state = RUN;
    }
    break;
 864:	00 00       	nop
 866:	03 c0       	rjmp	.+6      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
      srd.accel_count = srd.decel_val;
      // Start decelration with same delay as accel ended with.
      new_step_delay = last_accel_delay;
      srd.run_state = DECEL;
    }
    break;
 868:	00 00       	nop
 86a:	01 c0       	rjmp	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
    // Check if we at last step
    if (srd.accel_count >= 0)
    {
      srd.run_state = STOP;
    }
    break;
 86c:	00 00       	nop
  }
  srd.step_delay = new_step_delay;
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	9a 81       	ldd	r25, Y+2	; 0x02
 872:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <srd+0x2>
 876:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <srd+0x1>

}
 87a:	00 00       	nop
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	0f 90       	pop	r0
 8a2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <sqrt_t>:
 *
 *  \param x  Value to find square root of.
 *  \return  Square root of x.
 */
static unsigned long sqrt_t(unsigned long x)
{
 8ac:	6f 92       	push	r6
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	00 d0       	rcall	.+0      	; 0x8ca <sqrt_t+0x1e>
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <sqrt_t+0x20>
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
 8d0:	69 83       	std	Y+1, r22	; 0x01
 8d2:	7a 83       	std	Y+2, r23	; 0x02
 8d4:	8b 83       	std	Y+3, r24	; 0x03
 8d6:	9c 83       	std	Y+4, r25	; 0x04
  register unsigned long xr; // result register
  register unsigned long q2; // scan-bit register
  register unsigned char f;  // flag (one bit)

  xr = 0;           // clear result
 8d8:	e1 2c       	mov	r14, r1
 8da:	f1 2c       	mov	r15, r1
 8dc:	87 01       	movw	r16, r14
  q2 = 0x40000000L; // higest possible result bit
 8de:	a1 2c       	mov	r10, r1
 8e0:	b1 2c       	mov	r11, r1
 8e2:	65 01       	movw	r12, r10
 8e4:	68 94       	set
 8e6:	d6 f8       	bld	r13, 6
  do
  {
    if ((xr + q2) <= x)
 8e8:	a8 01       	movw	r20, r16
 8ea:	97 01       	movw	r18, r14
 8ec:	2a 0d       	add	r18, r10
 8ee:	3b 1d       	adc	r19, r11
 8f0:	4c 1d       	adc	r20, r12
 8f2:	5d 1d       	adc	r21, r13
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	9a 81       	ldd	r25, Y+2	; 0x02
 8f8:	ab 81       	ldd	r26, Y+3	; 0x03
 8fa:	bc 81       	ldd	r27, Y+4	; 0x04
 8fc:	82 17       	cp	r24, r18
 8fe:	93 07       	cpc	r25, r19
 900:	a4 07       	cpc	r26, r20
 902:	b5 07       	cpc	r27, r21
 904:	c8 f0       	brcs	.+50     	; 0x938 <__stack+0x39>
    {
      x -= xr + q2;
 906:	d8 01       	movw	r26, r16
 908:	c7 01       	movw	r24, r14
 90a:	8a 0d       	add	r24, r10
 90c:	9b 1d       	adc	r25, r11
 90e:	ac 1d       	adc	r26, r12
 910:	bd 1d       	adc	r27, r13
 912:	29 81       	ldd	r18, Y+1	; 0x01
 914:	3a 81       	ldd	r19, Y+2	; 0x02
 916:	4b 81       	ldd	r20, Y+3	; 0x03
 918:	5c 81       	ldd	r21, Y+4	; 0x04
 91a:	39 01       	movw	r6, r18
 91c:	4a 01       	movw	r8, r20
 91e:	68 1a       	sub	r6, r24
 920:	79 0a       	sbc	r7, r25
 922:	8a 0a       	sbc	r8, r26
 924:	9b 0a       	sbc	r9, r27
 926:	d4 01       	movw	r26, r8
 928:	c3 01       	movw	r24, r6
 92a:	89 83       	std	Y+1, r24	; 0x01
 92c:	9a 83       	std	Y+2, r25	; 0x02
 92e:	ab 83       	std	Y+3, r26	; 0x03
 930:	bc 83       	std	Y+4, r27	; 0x04
      f = 1; // set flag
 932:	99 24       	eor	r9, r9
 934:	93 94       	inc	r9
 936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
    }
    else
    {
      f = 0; // clear flag
 938:	91 2c       	mov	r9, r1
    }
    xr >>= 1;
 93a:	16 95       	lsr	r17
 93c:	07 95       	ror	r16
 93e:	f7 94       	ror	r15
 940:	e7 94       	ror	r14
    if (f)
 942:	99 20       	and	r9, r9
 944:	21 f0       	breq	.+8      	; 0x94e <__stack+0x4f>
    {
      xr += q2; // test flag
 946:	ea 0c       	add	r14, r10
 948:	fb 1c       	adc	r15, r11
 94a:	0c 1d       	adc	r16, r12
 94c:	1d 1d       	adc	r17, r13
    }
  } while (q2 >>= 2); // shift twice
 94e:	d6 94       	lsr	r13
 950:	c7 94       	ror	r12
 952:	b7 94       	ror	r11
 954:	a7 94       	ror	r10
 956:	d6 94       	lsr	r13
 958:	c7 94       	ror	r12
 95a:	b7 94       	ror	r11
 95c:	a7 94       	ror	r10
 95e:	a1 14       	cp	r10, r1
 960:	b1 04       	cpc	r11, r1
 962:	c1 04       	cpc	r12, r1
 964:	d1 04       	cpc	r13, r1
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
 968:	bf cf       	rjmp	.-130    	; 0x8e8 <sqrt_t+0x3c>
  if (xr < x)
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	9a 81       	ldd	r25, Y+2	; 0x02
 96e:	ab 81       	ldd	r26, Y+3	; 0x03
 970:	bc 81       	ldd	r27, Y+4	; 0x04
 972:	e8 16       	cp	r14, r24
 974:	f9 06       	cpc	r15, r25
 976:	0a 07       	cpc	r16, r26
 978:	1b 07       	cpc	r17, r27
 97a:	30 f4       	brcc	.+12     	; 0x988 <__stack+0x89>
  {
    return xr + 1; // add for rounding
 97c:	d8 01       	movw	r26, r16
 97e:	c7 01       	movw	r24, r14
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	a1 1d       	adc	r26, r1
 984:	b1 1d       	adc	r27, r1
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
  }
  else
  {
    return xr;
 988:	d8 01       	movw	r26, r16
 98a:	c7 01       	movw	r24, r14
  }
}
 98c:	bc 01       	movw	r22, r24
 98e:	cd 01       	movw	r24, r26
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	df 90       	pop	r13
 9a6:	cf 90       	pop	r12
 9a8:	bf 90       	pop	r11
 9aa:	af 90       	pop	r10
 9ac:	9f 90       	pop	r9
 9ae:	8f 90       	pop	r8
 9b0:	7f 90       	pop	r7
 9b2:	6f 90       	pop	r6
 9b4:	08 95       	ret

000009b6 <__iCliRetVal>:
}

volatile ringbuffer_t * uart_get_uart0_rx_buffer_address(void)
{
	return &(p_UART0_meta->rb_rx);
}
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
 9be:	f8 94       	cli
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <__iRestore>:
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <__iRestore+0x6>
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	9a 83       	std	Y+2, r25	; 0x02
 9d4:	89 83       	std	Y+1, r24	; 0x01
 9d6:	8f e5       	ldi	r24, 0x5F	; 95
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	29 81       	ldd	r18, Y+1	; 0x01
 9dc:	3a 81       	ldd	r19, Y+2	; 0x02
 9de:	f9 01       	movw	r30, r18
 9e0:	20 81       	ld	r18, Z
 9e2:	fc 01       	movw	r30, r24
 9e4:	20 83       	st	Z, r18
 9e6:	00 00       	nop
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	08 95       	ret

000009f2 <rbuffer_init>:
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	00 d0       	rcall	.+0      	; 0x9f8 <rbuffer_init+0x6>
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <rbuffer_init+0x8>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	9c 83       	std	Y+4, r25	; 0x04
 a00:	8b 83       	std	Y+3, r24	; 0x03
 a02:	8f e5       	ldi	r24, 0x5F	; 95
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	fc 01       	movw	r30, r24
 a08:	80 81       	ld	r24, Z
 a0a:	8a 83       	std	Y+2, r24	; 0x02
 a0c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__iCliRetVal>
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	13 c0       	rjmp	.+38     	; 0xa3a <rbuffer_init+0x48>
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	9c 81       	ldd	r25, Y+4	; 0x04
 a18:	80 5c       	subi	r24, 0xC0	; 192
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	fc 01       	movw	r30, r24
 a1e:	10 82       	st	Z, r1
 a20:	8b 81       	ldd	r24, Y+3	; 0x03
 a22:	9c 81       	ldd	r25, Y+4	; 0x04
 a24:	8f 5b       	subi	r24, 0xBF	; 191
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	fc 01       	movw	r30, r24
 a2a:	10 82       	st	Z, r1
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	9c 81       	ldd	r25, Y+4	; 0x04
 a30:	8e 5b       	subi	r24, 0xBE	; 190
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	fc 01       	movw	r30, r24
 a36:	10 82       	st	Z, r1
 a38:	19 82       	std	Y+1, r1	; 0x01
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	88 23       	and	r24, r24
 a3e:	51 f7       	brne	.-44     	; 0xa14 <rbuffer_init+0x22>
 a40:	ce 01       	movw	r24, r28
 a42:	02 96       	adiw	r24, 0x02	; 2
 a44:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__iRestore>
 a48:	00 00       	nop
 a4a:	0f 90       	pop	r0
 a4c:	0f 90       	pop	r0
 a4e:	0f 90       	pop	r0
 a50:	0f 90       	pop	r0
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <rbuffer_full>:
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	00 d0       	rcall	.+0      	; 0xa5e <rbuffer_full+0x6>
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	9a 83       	std	Y+2, r25	; 0x02
 a64:	89 83       	std	Y+1, r24	; 0x01
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	9a 81       	ldd	r25, Y+2	; 0x02
 a6a:	8e 5b       	subi	r24, 0xBE	; 190
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	fc 01       	movw	r30, r24
 a70:	90 81       	ld	r25, Z
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	90 34       	cpi	r25, 0x40	; 64
 a76:	09 f0       	breq	.+2      	; 0xa7a <rbuffer_full+0x22>
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	08 95       	ret

00000a84 <rbuffer_empty>:
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	00 d0       	rcall	.+0      	; 0xa8a <rbuffer_empty+0x6>
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62
 a8e:	9a 83       	std	Y+2, r25	; 0x02
 a90:	89 83       	std	Y+1, r24	; 0x01
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	9a 81       	ldd	r25, Y+2	; 0x02
 a96:	8e 5b       	subi	r24, 0xBE	; 190
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	fc 01       	movw	r30, r24
 a9c:	90 81       	ld	r25, Z
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	99 23       	and	r25, r25
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <rbuffer_empty+0x22>
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	0f 90       	pop	r0
 aa8:	0f 90       	pop	r0
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	08 95       	ret

00000ab0 <rbuffer_insert>:
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	00 d0       	rcall	.+0      	; 0xab6 <rbuffer_insert+0x6>
 ab6:	00 d0       	rcall	.+0      	; 0xab8 <rbuffer_insert+0x8>
 ab8:	1f 92       	push	r1
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	8b 83       	std	Y+3, r24	; 0x03
 ac0:	7d 83       	std	Y+5, r23	; 0x05
 ac2:	6c 83       	std	Y+4, r22	; 0x04
 ac4:	2c 81       	ldd	r18, Y+4	; 0x04
 ac6:	3d 81       	ldd	r19, Y+5	; 0x05
 ac8:	8c 81       	ldd	r24, Y+4	; 0x04
 aca:	9d 81       	ldd	r25, Y+5	; 0x05
 acc:	80 5c       	subi	r24, 0xC0	; 192
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	fc 01       	movw	r30, r24
 ad2:	80 81       	ld	r24, Z
 ad4:	88 2f       	mov	r24, r24
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	82 0f       	add	r24, r18
 ada:	93 1f       	adc	r25, r19
 adc:	2b 81       	ldd	r18, Y+3	; 0x03
 ade:	fc 01       	movw	r30, r24
 ae0:	20 83       	st	Z, r18
 ae2:	8f e5       	ldi	r24, 0x5F	; 95
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	fc 01       	movw	r30, r24
 ae8:	80 81       	ld	r24, Z
 aea:	8a 83       	std	Y+2, r24	; 0x02
 aec:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__iCliRetVal>
 af0:	89 83       	std	Y+1, r24	; 0x01
 af2:	1e c0       	rjmp	.+60     	; 0xb30 <rbuffer_insert+0x80>
 af4:	8c 81       	ldd	r24, Y+4	; 0x04
 af6:	9d 81       	ldd	r25, Y+5	; 0x05
 af8:	80 5c       	subi	r24, 0xC0	; 192
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	fc 01       	movw	r30, r24
 afe:	80 81       	ld	r24, Z
 b00:	8f 5f       	subi	r24, 0xFF	; 255
 b02:	28 2f       	mov	r18, r24
 b04:	2f 73       	andi	r18, 0x3F	; 63
 b06:	8c 81       	ldd	r24, Y+4	; 0x04
 b08:	9d 81       	ldd	r25, Y+5	; 0x05
 b0a:	80 5c       	subi	r24, 0xC0	; 192
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	fc 01       	movw	r30, r24
 b10:	20 83       	st	Z, r18
 b12:	8c 81       	ldd	r24, Y+4	; 0x04
 b14:	9d 81       	ldd	r25, Y+5	; 0x05
 b16:	8e 5b       	subi	r24, 0xBE	; 190
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	fc 01       	movw	r30, r24
 b1c:	80 81       	ld	r24, Z
 b1e:	21 e0       	ldi	r18, 0x01	; 1
 b20:	28 0f       	add	r18, r24
 b22:	8c 81       	ldd	r24, Y+4	; 0x04
 b24:	9d 81       	ldd	r25, Y+5	; 0x05
 b26:	8e 5b       	subi	r24, 0xBE	; 190
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	fc 01       	movw	r30, r24
 b2c:	20 83       	st	Z, r18
 b2e:	19 82       	std	Y+1, r1	; 0x01
 b30:	89 81       	ldd	r24, Y+1	; 0x01
 b32:	88 23       	and	r24, r24
 b34:	f9 f6       	brne	.-66     	; 0xaf4 <rbuffer_insert+0x44>
 b36:	ce 01       	movw	r24, r28
 b38:	02 96       	adiw	r24, 0x02	; 2
 b3a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__iRestore>
 b3e:	00 00       	nop
 b40:	0f 90       	pop	r0
 b42:	0f 90       	pop	r0
 b44:	0f 90       	pop	r0
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	08 95       	ret

00000b50 <rbuffer_remove>:
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	00 d0       	rcall	.+0      	; 0xb56 <rbuffer_remove+0x6>
 b56:	00 d0       	rcall	.+0      	; 0xb58 <rbuffer_remove+0x8>
 b58:	1f 92       	push	r1
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
 b5e:	9d 83       	std	Y+5, r25	; 0x05
 b60:	8c 83       	std	Y+4, r24	; 0x04
 b62:	2c 81       	ldd	r18, Y+4	; 0x04
 b64:	3d 81       	ldd	r19, Y+5	; 0x05
 b66:	8c 81       	ldd	r24, Y+4	; 0x04
 b68:	9d 81       	ldd	r25, Y+5	; 0x05
 b6a:	8f 5b       	subi	r24, 0xBF	; 191
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	fc 01       	movw	r30, r24
 b70:	80 81       	ld	r24, Z
 b72:	88 2f       	mov	r24, r24
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	fc 01       	movw	r30, r24
 b7c:	80 81       	ld	r24, Z
 b7e:	8a 83       	std	Y+2, r24	; 0x02
 b80:	8f e5       	ldi	r24, 0x5F	; 95
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	fc 01       	movw	r30, r24
 b86:	80 81       	ld	r24, Z
 b88:	8b 83       	std	Y+3, r24	; 0x03
 b8a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__iCliRetVal>
 b8e:	89 83       	std	Y+1, r24	; 0x01
 b90:	1e c0       	rjmp	.+60     	; 0xbce <rbuffer_remove+0x7e>
 b92:	8c 81       	ldd	r24, Y+4	; 0x04
 b94:	9d 81       	ldd	r25, Y+5	; 0x05
 b96:	8f 5b       	subi	r24, 0xBF	; 191
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	fc 01       	movw	r30, r24
 b9c:	80 81       	ld	r24, Z
 b9e:	8f 5f       	subi	r24, 0xFF	; 255
 ba0:	28 2f       	mov	r18, r24
 ba2:	2f 73       	andi	r18, 0x3F	; 63
 ba4:	8c 81       	ldd	r24, Y+4	; 0x04
 ba6:	9d 81       	ldd	r25, Y+5	; 0x05
 ba8:	8f 5b       	subi	r24, 0xBF	; 191
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	fc 01       	movw	r30, r24
 bae:	20 83       	st	Z, r18
 bb0:	8c 81       	ldd	r24, Y+4	; 0x04
 bb2:	9d 81       	ldd	r25, Y+5	; 0x05
 bb4:	8e 5b       	subi	r24, 0xBE	; 190
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	fc 01       	movw	r30, r24
 bba:	80 81       	ld	r24, Z
 bbc:	2f ef       	ldi	r18, 0xFF	; 255
 bbe:	28 0f       	add	r18, r24
 bc0:	8c 81       	ldd	r24, Y+4	; 0x04
 bc2:	9d 81       	ldd	r25, Y+5	; 0x05
 bc4:	8e 5b       	subi	r24, 0xBE	; 190
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	fc 01       	movw	r30, r24
 bca:	20 83       	st	Z, r18
 bcc:	19 82       	std	Y+1, r1	; 0x01
 bce:	89 81       	ldd	r24, Y+1	; 0x01
 bd0:	88 23       	and	r24, r24
 bd2:	f9 f6       	brne	.-66     	; 0xb92 <rbuffer_remove+0x42>
 bd4:	ce 01       	movw	r24, r28
 bd6:	03 96       	adiw	r24, 0x03	; 3
 bd8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__iRestore>
 bdc:	8a 81       	ldd	r24, Y+2	; 0x02
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	0f 90       	pop	r0
 be4:	0f 90       	pop	r0
 be6:	0f 90       	pop	r0
 be8:	df 91       	pop	r29
 bea:	cf 91       	pop	r28
 bec:	08 95       	ret

00000bee <usart0_init>:
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	8a e2       	ldi	r24, 0x2A	; 42
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	2a e2       	ldi	r18, 0x2A	; 42
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	f9 01       	movw	r30, r18
 c00:	20 81       	ld	r18, Z
 c02:	2d 7f       	andi	r18, 0xFD	; 253
 c04:	fc 01       	movw	r30, r24
 c06:	20 83       	st	Z, r18
 c08:	8b e2       	ldi	r24, 0x2B	; 43
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	2b e2       	ldi	r18, 0x2B	; 43
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	f9 01       	movw	r30, r18
 c12:	20 81       	ld	r18, Z
 c14:	22 60       	ori	r18, 0x02	; 2
 c16:	fc 01       	movw	r30, r24
 c18:	20 83       	st	Z, r18
 c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c1e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 c22:	8d 5b       	subi	r24, 0xBD	; 189
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <rbuffer_init>
 c2a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c2e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 c32:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <rbuffer_init>
 c36:	85 ec       	ldi	r24, 0xC5	; 197
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	fc 01       	movw	r30, r24
 c3c:	10 82       	st	Z, r1
 c3e:	84 ec       	ldi	r24, 0xC4	; 196
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	23 e3       	ldi	r18, 0x33	; 51
 c44:	fc 01       	movw	r30, r24
 c46:	20 83       	st	Z, r18
 c48:	81 ec       	ldi	r24, 0xC1	; 193
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	21 ec       	ldi	r18, 0xC1	; 193
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	f9 01       	movw	r30, r18
 c52:	20 81       	ld	r18, Z
 c54:	28 69       	ori	r18, 0x98	; 152
 c56:	fc 01       	movw	r30, r24
 c58:	20 83       	st	Z, r18
 c5a:	82 ec       	ldi	r24, 0xC2	; 194
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	22 ec       	ldi	r18, 0xC2	; 194
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	f9 01       	movw	r30, r18
 c64:	20 81       	ld	r18, Z
 c66:	26 60       	ori	r18, 0x06	; 6
 c68:	fc 01       	movw	r30, r24
 c6a:	20 83       	st	Z, r18
 c6c:	78 94       	sei
 c6e:	00 00       	nop
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	08 95       	ret

00000c76 <__vector_18>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART_RX_vect) {
 c76:	1f 92       	push	r1
 c78:	0f 92       	push	r0
 c7a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 c7e:	0f 92       	push	r0
 c80:	11 24       	eor	r1, r1
 c82:	2f 93       	push	r18
 c84:	3f 93       	push	r19
 c86:	4f 93       	push	r20
 c88:	5f 93       	push	r21
 c8a:	6f 93       	push	r22
 c8c:	7f 93       	push	r23
 c8e:	8f 93       	push	r24
 c90:	9f 93       	push	r25
 c92:	af 93       	push	r26
 c94:	bf 93       	push	r27
 c96:	ef 93       	push	r30
 c98:	ff 93       	push	r31
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
 c9e:	1f 92       	push	r1
 ca0:	cd b7       	in	r28, 0x3d	; 61
 ca2:	de b7       	in	r29, 0x3e	; 62
	
   char	data = UDR0;
 ca4:	86 ec       	ldi	r24, 0xC6	; 198
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	fc 01       	movw	r30, r24
 caa:	80 81       	ld	r24, Z
 cac:	89 83       	std	Y+1, r24	; 0x01


    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
 cae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cb2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 cb6:	0e 94 2c 05 	call	0xa58	; 0xa58 <rbuffer_full>
 cba:	98 2f       	mov	r25, r24
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	89 27       	eor	r24, r25
 cc0:	88 23       	and	r24, r24
 cc2:	d1 f0       	breq	.+52     	; 0xcf8 <__vector_18+0x82>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
 cc4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cc8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ccc:	bc 01       	movw	r22, r24
 cce:	89 81       	ldd	r24, Y+1	; 0x01
 cd0:	0e 94 58 05 	call	0xab0	; 0xab0 <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
 cd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cd8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 cdc:	20 ec       	ldi	r18, 0xC0	; 192
 cde:	30 e0       	ldi	r19, 0x00	; 0
 ce0:	f9 01       	movw	r30, r18
 ce2:	20 81       	ld	r18, Z
 ce4:	22 2f       	mov	r18, r18
 ce6:	30 e0       	ldi	r19, 0x00	; 0
 ce8:	2c 71       	andi	r18, 0x1C	; 28
 cea:	33 27       	eor	r19, r19
 cec:	8a 57       	subi	r24, 0x7A	; 122
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	fc 01       	movw	r30, r24
 cf2:	31 83       	std	Z+1, r19	; 0x01
 cf4:	20 83       	st	Z, r18

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
    }   
}
 cf6:	12 c0       	rjmp	.+36     	; 0xd1c <__vector_18+0xa6>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
 cf8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cfc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d00:	20 ec       	ldi	r18, 0xC0	; 192
 d02:	30 e0       	ldi	r19, 0x00	; 0
 d04:	f9 01       	movw	r30, r18
 d06:	20 81       	ld	r18, Z
 d08:	22 2f       	mov	r18, r18
 d0a:	30 e0       	ldi	r19, 0x00	; 0
 d0c:	2c 71       	andi	r18, 0x1C	; 28
 d0e:	33 27       	eor	r19, r19
 d10:	21 60       	ori	r18, 0x01	; 1
 d12:	8a 57       	subi	r24, 0x7A	; 122
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	fc 01       	movw	r30, r24
 d18:	31 83       	std	Z+1, r19	; 0x01
 d1a:	20 83       	st	Z, r18
    }   
}
 d1c:	00 00       	nop
 d1e:	0f 90       	pop	r0
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	ff 91       	pop	r31
 d26:	ef 91       	pop	r30
 d28:	bf 91       	pop	r27
 d2a:	af 91       	pop	r26
 d2c:	9f 91       	pop	r25
 d2e:	8f 91       	pop	r24
 d30:	7f 91       	pop	r23
 d32:	6f 91       	pop	r22
 d34:	5f 91       	pop	r21
 d36:	4f 91       	pop	r20
 d38:	3f 91       	pop	r19
 d3a:	2f 91       	pop	r18
 d3c:	0f 90       	pop	r0
 d3e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 d42:	0f 90       	pop	r0
 d44:	1f 90       	pop	r1
 d46:	18 95       	reti

00000d48 <__vector_19>:
ISR(USART_UDRE_vect) {
 d48:	1f 92       	push	r1
 d4a:	0f 92       	push	r0
 d4c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 d50:	0f 92       	push	r0
 d52:	11 24       	eor	r1, r1
 d54:	0f 93       	push	r16
 d56:	1f 93       	push	r17
 d58:	2f 93       	push	r18
 d5a:	3f 93       	push	r19
 d5c:	4f 93       	push	r20
 d5e:	5f 93       	push	r21
 d60:	6f 93       	push	r22
 d62:	7f 93       	push	r23
 d64:	8f 93       	push	r24
 d66:	9f 93       	push	r25
 d68:	af 93       	push	r26
 d6a:	bf 93       	push	r27
 d6c:	ef 93       	push	r30
 d6e:	ff 93       	push	r31
 d70:	cf 93       	push	r28
 d72:	df 93       	push	r29
 d74:	cd b7       	in	r28, 0x3d	; 61
 d76:	de b7       	in	r29, 0x3e	; 62
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
 d78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d80:	8d 5b       	subi	r24, 0xBD	; 189
 d82:	9f 4f       	sbci	r25, 0xFF	; 255
 d84:	0e 94 42 05 	call	0xa84	; 0xa84 <rbuffer_empty>
 d88:	98 2f       	mov	r25, r24
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	89 27       	eor	r24, r25
 d8e:	88 23       	and	r24, r24
 d90:	69 f0       	breq	.+26     	; 0xdac <__vector_19+0x64>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
 d92:	06 ec       	ldi	r16, 0xC6	; 198
 d94:	10 e0       	ldi	r17, 0x00	; 0
 d96:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d9a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d9e:	8d 5b       	subi	r24, 0xBD	; 189
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	0e 94 a8 05 	call	0xb50	; 0xb50 <rbuffer_remove>
 da6:	f8 01       	movw	r30, r16
 da8:	80 83       	st	Z, r24
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
    }
}
 daa:	09 c0       	rjmp	.+18     	; 0xdbe <__vector_19+0x76>
ISR(USART_UDRE_vect) {
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
 dac:	81 ec       	ldi	r24, 0xC1	; 193
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	21 ec       	ldi	r18, 0xC1	; 193
 db2:	30 e0       	ldi	r19, 0x00	; 0
 db4:	f9 01       	movw	r30, r18
 db6:	20 81       	ld	r18, Z
 db8:	2f 7d       	andi	r18, 0xDF	; 223
 dba:	fc 01       	movw	r30, r24
 dbc:	20 83       	st	Z, r18
    }
}
 dbe:	00 00       	nop
 dc0:	df 91       	pop	r29
 dc2:	cf 91       	pop	r28
 dc4:	ff 91       	pop	r31
 dc6:	ef 91       	pop	r30
 dc8:	bf 91       	pop	r27
 dca:	af 91       	pop	r26
 dcc:	9f 91       	pop	r25
 dce:	8f 91       	pop	r24
 dd0:	7f 91       	pop	r23
 dd2:	6f 91       	pop	r22
 dd4:	5f 91       	pop	r21
 dd6:	4f 91       	pop	r20
 dd8:	3f 91       	pop	r19
 dda:	2f 91       	pop	r18
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	0f 90       	pop	r0
 de2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 de6:	0f 90       	pop	r0
 de8:	1f 90       	pop	r1
 dea:	18 95       	reti

00000dec <__mulsi3>:
 dec:	db 01       	movw	r26, r22
 dee:	8f 93       	push	r24
 df0:	9f 93       	push	r25
 df2:	0e 94 47 07 	call	0xe8e	; 0xe8e <__muluhisi3>
 df6:	bf 91       	pop	r27
 df8:	af 91       	pop	r26
 dfa:	a2 9f       	mul	r26, r18
 dfc:	80 0d       	add	r24, r0
 dfe:	91 1d       	adc	r25, r1
 e00:	a3 9f       	mul	r26, r19
 e02:	90 0d       	add	r25, r0
 e04:	b2 9f       	mul	r27, r18
 e06:	90 0d       	add	r25, r0
 e08:	11 24       	eor	r1, r1
 e0a:	08 95       	ret

00000e0c <__udivmodsi4>:
 e0c:	a1 e2       	ldi	r26, 0x21	; 33
 e0e:	1a 2e       	mov	r1, r26
 e10:	aa 1b       	sub	r26, r26
 e12:	bb 1b       	sub	r27, r27
 e14:	fd 01       	movw	r30, r26
 e16:	0d c0       	rjmp	.+26     	; 0xe32 <__udivmodsi4_ep>

00000e18 <__udivmodsi4_loop>:
 e18:	aa 1f       	adc	r26, r26
 e1a:	bb 1f       	adc	r27, r27
 e1c:	ee 1f       	adc	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	a2 17       	cp	r26, r18
 e22:	b3 07       	cpc	r27, r19
 e24:	e4 07       	cpc	r30, r20
 e26:	f5 07       	cpc	r31, r21
 e28:	20 f0       	brcs	.+8      	; 0xe32 <__udivmodsi4_ep>
 e2a:	a2 1b       	sub	r26, r18
 e2c:	b3 0b       	sbc	r27, r19
 e2e:	e4 0b       	sbc	r30, r20
 e30:	f5 0b       	sbc	r31, r21

00000e32 <__udivmodsi4_ep>:
 e32:	66 1f       	adc	r22, r22
 e34:	77 1f       	adc	r23, r23
 e36:	88 1f       	adc	r24, r24
 e38:	99 1f       	adc	r25, r25
 e3a:	1a 94       	dec	r1
 e3c:	69 f7       	brne	.-38     	; 0xe18 <__udivmodsi4_loop>
 e3e:	60 95       	com	r22
 e40:	70 95       	com	r23
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	9b 01       	movw	r18, r22
 e48:	ac 01       	movw	r20, r24
 e4a:	bd 01       	movw	r22, r26
 e4c:	cf 01       	movw	r24, r30
 e4e:	08 95       	ret

00000e50 <__divmodsi4>:
 e50:	05 2e       	mov	r0, r21
 e52:	97 fb       	bst	r25, 7
 e54:	1e f4       	brtc	.+6      	; 0xe5c <__divmodsi4+0xc>
 e56:	00 94       	com	r0
 e58:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__negsi2>
 e5c:	57 fd       	sbrc	r21, 7
 e5e:	07 d0       	rcall	.+14     	; 0xe6e <__divmodsi4_neg2>
 e60:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 e64:	07 fc       	sbrc	r0, 7
 e66:	03 d0       	rcall	.+6      	; 0xe6e <__divmodsi4_neg2>
 e68:	4e f4       	brtc	.+18     	; 0xe7c <__divmodsi4_exit>
 e6a:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__negsi2>

00000e6e <__divmodsi4_neg2>:
 e6e:	50 95       	com	r21
 e70:	40 95       	com	r20
 e72:	30 95       	com	r19
 e74:	21 95       	neg	r18
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	4f 4f       	sbci	r20, 0xFF	; 255
 e7a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e7c <__divmodsi4_exit>:
 e7c:	08 95       	ret

00000e7e <__negsi2>:
 e7e:	90 95       	com	r25
 e80:	80 95       	com	r24
 e82:	70 95       	com	r23
 e84:	61 95       	neg	r22
 e86:	7f 4f       	sbci	r23, 0xFF	; 255
 e88:	8f 4f       	sbci	r24, 0xFF	; 255
 e8a:	9f 4f       	sbci	r25, 0xFF	; 255
 e8c:	08 95       	ret

00000e8e <__muluhisi3>:
 e8e:	0e 94 52 07 	call	0xea4	; 0xea4 <__umulhisi3>
 e92:	a5 9f       	mul	r26, r21
 e94:	90 0d       	add	r25, r0
 e96:	b4 9f       	mul	r27, r20
 e98:	90 0d       	add	r25, r0
 e9a:	a4 9f       	mul	r26, r20
 e9c:	80 0d       	add	r24, r0
 e9e:	91 1d       	adc	r25, r1
 ea0:	11 24       	eor	r1, r1
 ea2:	08 95       	ret

00000ea4 <__umulhisi3>:
 ea4:	a2 9f       	mul	r26, r18
 ea6:	b0 01       	movw	r22, r0
 ea8:	b3 9f       	mul	r27, r19
 eaa:	c0 01       	movw	r24, r0
 eac:	a3 9f       	mul	r26, r19
 eae:	70 0d       	add	r23, r0
 eb0:	81 1d       	adc	r24, r1
 eb2:	11 24       	eor	r1, r1
 eb4:	91 1d       	adc	r25, r1
 eb6:	b2 9f       	mul	r27, r18
 eb8:	70 0d       	add	r23, r0
 eba:	81 1d       	adc	r24, r1
 ebc:	11 24       	eor	r1, r1
 ebe:	91 1d       	adc	r25, r1
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
